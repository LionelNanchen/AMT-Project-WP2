/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ch.heigvd.gamification.api;

import ch.heigvd.gamification.api.dto.PointScaleDTO;
import ch.heigvd.gamification.api.dto.PointScaleSummaryDTO;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-24T13:22:00.036+01:00")

@Api(value = "pointScale", description = "the pointScale API")
public interface PointScaleApi {

    @ApiOperation(value = "Get all pointScale", notes = "Get all pointScale in relation with the app", response = PointScaleSummaryDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved all pointScale", response = PointScaleSummaryDTO.class, responseContainer = "List") })
    
    @RequestMapping(value = "/pointScale",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PointScaleSummaryDTO>> pointScaleGet(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Key", required=true) String xApiKey);


    @ApiOperation(value = "Delete a pointScale", notes = "Delete a pointScale referenced by it's id", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successfully deleted.", response = Void.class) })
    
    @RequestMapping(value = "/pointScale/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> pointScaleIdDelete(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Key", required=true) String xApiKey,@ApiParam(value = "PointScaleModel id to delete",required=true ) @PathVariable("id") Long id);


    @ApiOperation(value = "Update a pointScale", notes = "Update a pointScale referenced by it's id", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated.", response = Void.class) })
    
    @RequestMapping(value = "/pointScale/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> pointScaleIdPut(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Key", required=true) String xApiKey,@ApiParam(value = "PointScaleModel id to update",required=true ) @PathVariable("id") Long id,@ApiParam(value = "The pointScale must have a new value" ,required=true )  @Valid @RequestBody PointScaleDTO body);


    @ApiOperation(value = "Add a new pointScale", notes = "Add a new pointScale for the application", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully added", response = Void.class) })
    
    @RequestMapping(value = "/pointScale",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> pointScalePost(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Key", required=true) String xApiKey,@ApiParam(value = "The new pointScale" ,required=true )  @Valid @RequestBody PointScaleDTO body);

}
