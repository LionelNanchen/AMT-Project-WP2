/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ch.heigvd.gamification.api;

import ch.heigvd.gamification.api.dto.BadgesDTO;
import ch.heigvd.gamification.api.dto.BadgesResponseDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-24T10:51:16.109+01:00")

@Api(value = "badges", description = "the badges API")
public interface BadgesApi {

    @ApiOperation(value = "Get all badges for an application", nickname = "badgesGet", notes = "", response = BadgesResponseDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved all badges", response = BadgesResponseDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/badges",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BadgesResponseDTO>> badgesGet(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Token", required=true) String xApiToken);


    @ApiOperation(value = "Delete a badge", nickname = "badgesIdDelete", notes = "Delete one badge referenced by it's id.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successfully deleted") })
    @RequestMapping(value = "/badges/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> badgesIdDelete(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Token", required=true) String xApiToken,@ApiParam(value = "Badge id to delete",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update a badge", nickname = "badgesIdPut", notes = "Update a badge referenced by it's id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated.") })
    @RequestMapping(value = "/badges/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> badgesIdPut(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Token", required=true) String xApiToken,@ApiParam(value = "BadgeModel id to update",required=true) @PathVariable("id") Long id,@ApiParam(value = "The badge must have a new name and a new description" ,required=true )  @Valid @RequestBody BadgesDTO body);


    @ApiOperation(value = "Add a new badge to an application", nickname = "badgesPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully added") })
    @RequestMapping(value = "/badges",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> badgesPost(@ApiParam(value = "token that contains the application key" ,required=true) @RequestHeader(value="X-Api-Token", required=true) String xApiToken,@ApiParam(value = "The new badge need to have a name and a description." ,required=true )  @Valid @RequestBody BadgesDTO body);

}
